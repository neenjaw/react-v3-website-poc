import { ConceptStatus } from '../concept-map/concept-types'

export const data1 = {
  graph: {
    concepts: [
      {
        slug: 'basics',
        name: 'Basics',
        web_url: 'http://lvh.me:3020/tracks/elixir/concepts/basics',
      },
      {
        slug: 'booleans',
        name: 'Booleans',
        web_url: 'http://lvh.me:3020/tracks/elixir/concepts/booleans',
      },
    ],
    levels: [['basics'], ['booleans']],
    connections: [{ from: 'basics', to: 'booleans' }],
    status: {
      basics: ConceptStatus.Unlocked,
      booleans: ConceptStatus.Locked,
    },
  },
}

export const data = {
  graph: {
    concepts: [
      {
        slug: 'basics',
        name: 'Basics',
        web_url: 'http://lvh.me:3020/tracks/elixir/concepts/basics',
      },
      {
        slug: 'booleans',
        name: 'Booleans',
        web_url: 'http://lvh.me:3020/tracks/elixir/concepts/booleans',
      },
      {
        slug: 'integers',
        name: 'Integers',
        web_url: 'http://lvh.me:3020/tracks/elixir/concepts/integers',
      },
      {
        slug: 'floating-point-numbers',
        name: 'Floating Point Numbers',
        web_url:
          'http://lvh.me:3020/tracks/elixir/concepts/floating-point-numbers',
      },
      {
        slug: 'cond',
        name: 'Cond',
        web_url: 'http://lvh.me:3020/tracks/elixir/concepts/cond',
      },
      {
        slug: 'atoms',
        name: 'Atoms',
        web_url: 'http://lvh.me:3020/tracks/elixir/concepts/atoms',
      },
      {
        slug: 'lists',
        name: 'Lists',
        web_url: 'http://lvh.me:3020/tracks/elixir/concepts/lists',
      },
      {
        slug: 'string-literals',
        name: 'String Literals',
        web_url: 'http://lvh.me:3020/tracks/elixir/concepts/string-literals',
      },
      {
        slug: 'multiple-clause-functions',
        name: 'Multiple Clause Functions',
        web_url:
          'http://lvh.me:3020/tracks/elixir/concepts/multiple-clause-functions',
      },
      {
        slug: 'guards',
        name: 'Guards',
        web_url: 'http://lvh.me:3020/tracks/elixir/concepts/guards',
      },
      {
        slug: 'default-arguments',
        name: 'Default Arguments',
        web_url: 'http://lvh.me:3020/tracks/elixir/concepts/default-arguments',
      },
      {
        slug: 'anonymous-functions',
        name: 'Anonymous Functions',
        web_url:
          'http://lvh.me:3020/tracks/elixir/concepts/anonymous-functions',
      },
      {
        slug: 'closures',
        name: 'Closures',
        web_url: 'http://lvh.me:3020/tracks/elixir/concepts/closures',
      },
      {
        slug: 'bit-manipulation',
        name: 'Bit Manipulation',
        web_url: 'http://lvh.me:3020/tracks/elixir/concepts/bit-manipulation',
      },
      {
        slug: 'tuples',
        name: 'Tuples',
        web_url: 'http://lvh.me:3020/tracks/elixir/concepts/tuples',
      },
      {
        slug: 'pattern-matching',
        name: 'Pattern Matching',
        web_url: 'http://lvh.me:3020/tracks/elixir/concepts/pattern-matching',
      },
      {
        slug: 'strings',
        name: 'Strings',
        web_url: 'http://lvh.me:3020/tracks/elixir/concepts/strings',
      },
      {
        slug: 'nil',
        name: 'Nil',
        web_url: 'http://lvh.me:3020/tracks/elixir/concepts/nil',
      },
      {
        slug: 'if',
        name: 'If',
        web_url: 'http://lvh.me:3020/tracks/elixir/concepts/if',
      },
      {
        slug: 'module-attributes-as-constants',
        name: 'Module Attributes As Constants',
        web_url:
          'http://lvh.me:3020/tracks/elixir/concepts/module-attributes-as-constants',
      },
      {
        slug: 'maps',
        name: 'Maps',
        web_url: 'http://lvh.me:3020/tracks/elixir/concepts/maps',
      },
      {
        slug: 'recursion',
        name: 'Recursion',
        web_url: 'http://lvh.me:3020/tracks/elixir/concepts/recursion',
      },
      {
        slug: 'charlists',
        name: 'Charlists',
        web_url: 'http://lvh.me:3020/tracks/elixir/concepts/charlists',
      },
      {
        slug: 'case',
        name: 'Case',
        web_url: 'http://lvh.me:3020/tracks/elixir/concepts/case',
      },
      {
        slug: 'access-behaviour',
        name: 'Access Behaviour',
        web_url: 'http://lvh.me:3020/tracks/elixir/concepts/access-behaviour',
      },
      {
        slug: 'binaries',
        name: 'Binaries',
        web_url: 'http://lvh.me:3020/tracks/elixir/concepts/binaries',
      },
      {
        slug: 'bitstrings',
        name: 'Bitstrings',
        web_url: 'http://lvh.me:3020/tracks/elixir/concepts/bitstrings',
      },
      {
        slug: 'tail-call-recursion',
        name: 'Tail Call Recursion',
        web_url:
          'http://lvh.me:3020/tracks/elixir/concepts/tail-call-recursion',
      },
      {
        slug: 'enum',
        name: 'Enum',
        web_url: 'http://lvh.me:3020/tracks/elixir/concepts/enum',
      },
      {
        slug: 'errors',
        name: 'Errors',
        web_url: 'http://lvh.me:3020/tracks/elixir/concepts/errors',
      },
      {
        slug: 'try-rescue',
        name: 'Try Rescue',
        web_url: 'http://lvh.me:3020/tracks/elixir/concepts/try-rescue',
      },
      {
        slug: 'structs',
        name: 'Structs',
        web_url: 'http://lvh.me:3020/tracks/elixir/concepts/structs',
      },
      {
        slug: 'exceptions',
        name: 'Exceptions',
        web_url: 'http://lvh.me:3020/tracks/elixir/concepts/exceptions',
      },
      {
        slug: 'keyword-lists',
        name: 'Keyword Lists',
        web_url: 'http://lvh.me:3020/tracks/elixir/concepts/keyword-lists',
      },
      {
        slug: 'try-rescue-else-after',
        name: 'Try Rescue Else After',
        web_url:
          'http://lvh.me:3020/tracks/elixir/concepts/try-rescue-else-after',
      },
      {
        slug: 'dynamic-dispatch',
        name: 'Dynamic Dispatch',
        web_url: 'http://lvh.me:3020/tracks/elixir/concepts/dynamic-dispatch',
      },
      {
        slug: 'processes',
        name: 'Processes',
        web_url: 'http://lvh.me:3020/tracks/elixir/concepts/processes',
      },
      {
        slug: 'pids',
        name: 'Pids',
        web_url: 'http://lvh.me:3020/tracks/elixir/concepts/pids',
      },
      {
        slug: 'streams',
        name: 'Streams',
        web_url: 'http://lvh.me:3020/tracks/elixir/concepts/streams',
      },
      {
        slug: 'pipe-operator',
        name: 'Pipe Operator',
        web_url: 'http://lvh.me:3020/tracks/elixir/concepts/pipe-operator',
      },
      {
        slug: 'ranges',
        name: 'Ranges',
        web_url: 'http://lvh.me:3020/tracks/elixir/concepts/ranges',
      },
      {
        slug: 'agent',
        name: 'Agent',
        web_url: 'http://lvh.me:3020/tracks/elixir/concepts/agent',
      },
      {
        slug: 'regular-expressions',
        name: 'Regular Expressions',
        web_url:
          'http://lvh.me:3020/tracks/elixir/concepts/regular-expressions',
      },
      {
        slug: 'list-comprehensions',
        name: 'List Comprehensions',
        web_url:
          'http://lvh.me:3020/tracks/elixir/concepts/list-comprehensions',
      },
      {
        slug: 'protocols',
        name: 'Protocols',
        web_url: 'http://lvh.me:3020/tracks/elixir/concepts/protocols',
      },
    ],
    levels: [
      ['basics'],
      [
        'booleans',
        'integers',
        'floating-point-numbers',
        'anonymous-functions',
        'closures',
        'bit-manipulation',
      ],
      ['cond', 'atoms', 'lists', 'string-literals'],
      ['multiple-clause-functions', 'guards', 'default-arguments'],
      ['tuples', 'pattern-matching'],
      ['strings', 'module-attributes-as-constants', 'maps', 'recursion'],
      [
        'nil',
        'if',
        'charlists',
        'case',
        'processes',
        'pids',
        'regular-expressions',
      ],
      [
        'access-behaviour',
        'bitstrings',
        'tail-call-recursion',
        'enum',
        'structs',
        'keyword-lists',
      ],
      [
        'binaries',
        'errors',
        'try-rescue',
        'streams',
        'pipe-operator',
        'ranges',
        'agent',
        'list-comprehensions',
        'protocols',
      ],
      ['exceptions', 'try-rescue-else-after', 'dynamic-dispatch'],
    ],
    connections: [
      { from: 'basics', to: 'booleans' },
      { from: 'basics', to: 'integers' },
      { from: 'basics', to: 'floating-point-numbers' },
      { from: 'basics', to: 'anonymous-functions' },
      { from: 'basics', to: 'closures' },
      { from: 'basics', to: 'bit-manipulation' },
      { from: 'booleans', to: 'cond' },
      { from: 'booleans', to: 'atoms' },
      { from: 'booleans', to: 'lists' },
      { from: 'booleans', to: 'string-literals' },
      { from: 'cond', to: 'multiple-clause-functions' },
      { from: 'cond', to: 'guards' },
      { from: 'cond', to: 'default-arguments' },
      { from: 'atoms', to: 'multiple-clause-functions' },
      { from: 'atoms', to: 'guards' },
      { from: 'atoms', to: 'default-arguments' },
      { from: 'lists', to: 'multiple-clause-functions' },
      { from: 'lists', to: 'guards' },
      { from: 'lists', to: 'default-arguments' },
      { from: 'string-literals', to: 'multiple-clause-functions' },
      { from: 'string-literals', to: 'guards' },
      { from: 'string-literals', to: 'default-arguments' },
      { from: 'multiple-clause-functions', to: 'tuples' },
      { from: 'multiple-clause-functions', to: 'pattern-matching' },
      { from: 'guards', to: 'tuples' },
      { from: 'guards', to: 'pattern-matching' },
      { from: 'default-arguments', to: 'tuples' },
      { from: 'default-arguments', to: 'pattern-matching' },
      { from: 'tuples', to: 'strings' },
      { from: 'pattern-matching', to: 'strings' },
      { from: 'tuples', to: 'module-attributes-as-constants' },
      { from: 'tuples', to: 'maps' },
      { from: 'pattern-matching', to: 'module-attributes-as-constants' },
      { from: 'pattern-matching', to: 'maps' },
      { from: 'tuples', to: 'recursion' },
      { from: 'pattern-matching', to: 'recursion' },
      { from: 'strings', to: 'nil' },
      { from: 'strings', to: 'if' },
      { from: 'recursion', to: 'charlists' },
      { from: 'recursion', to: 'case' },
      { from: 'recursion', to: 'processes' },
      { from: 'recursion', to: 'pids' },
      { from: 'strings', to: 'regular-expressions' },
      { from: 'nil', to: 'access-behaviour' },
      { from: 'if', to: 'access-behaviour' },
      { from: 'charlists', to: 'bitstrings' },
      { from: 'charlists', to: 'tail-call-recursion' },
      { from: 'case', to: 'bitstrings' },
      { from: 'case', to: 'tail-call-recursion' },
      { from: 'nil', to: 'enum' },
      { from: 'if', to: 'enum' },
      { from: 'nil', to: 'structs' },
      { from: 'if', to: 'structs' },
      { from: 'nil', to: 'keyword-lists' },
      { from: 'if', to: 'keyword-lists' },
      { from: 'bitstrings', to: 'binaries' },
      { from: 'tail-call-recursion', to: 'binaries' },
      { from: 'structs', to: 'errors' },
      { from: 'structs', to: 'try-rescue' },
      { from: 'enum', to: 'streams' },
      { from: 'enum', to: 'pipe-operator' },
      { from: 'enum', to: 'ranges' },
      { from: 'structs', to: 'agent' },
      { from: 'enum', to: 'list-comprehensions' },
      { from: 'keyword-lists', to: 'list-comprehensions' },
      { from: 'structs', to: 'protocols' },
      { from: 'errors', to: 'exceptions' },
      { from: 'try-rescue', to: 'exceptions' },
      { from: 'errors', to: 'try-rescue-else-after' },
      { from: 'errors', to: 'dynamic-dispatch' },
      { from: 'try-rescue', to: 'try-rescue-else-after' },
      { from: 'try-rescue', to: 'dynamic-dispatch' },
    ],
    status: {
      basics: ConceptStatus.Unlocked,
      booleans: ConceptStatus.Locked,
      integers: ConceptStatus.Locked,
      'floating-point-numbers': ConceptStatus.Locked,
      cond: ConceptStatus.Locked,
      atoms: ConceptStatus.Locked,
      lists: ConceptStatus.Locked,
      'string-literals': ConceptStatus.Locked,
      'multiple-clause-functions': ConceptStatus.Locked,
      guards: ConceptStatus.Locked,
      'default-arguments': ConceptStatus.Locked,
      'anonymous-functions': ConceptStatus.Locked,
      closures: ConceptStatus.Locked,
      'bit-manipulation': ConceptStatus.Locked,
      tuples: ConceptStatus.Locked,
      'pattern-matching': ConceptStatus.Locked,
      strings: ConceptStatus.Locked,
      nil: ConceptStatus.Locked,
      if: ConceptStatus.Locked,
      'module-attributes-as-constants': ConceptStatus.Locked,
      maps: ConceptStatus.Locked,
      recursion: ConceptStatus.Locked,
      charlists: ConceptStatus.Locked,
      case: ConceptStatus.Locked,
      'access-behaviour': ConceptStatus.Locked,
      bitstrings: ConceptStatus.Locked,
      binaries: ConceptStatus.Locked,
      'tail-call-recursion': ConceptStatus.Locked,
      enum: ConceptStatus.Locked,
      structs: ConceptStatus.Locked,
      errors: ConceptStatus.Locked,
      'try-rescue': ConceptStatus.Locked,
      exceptions: ConceptStatus.Locked,
      'keyword-lists': ConceptStatus.Locked,
      io: ConceptStatus.Unlocked,
      'try-rescue-else-after': ConceptStatus.Locked,
      'dynamic-dispatch': ConceptStatus.Locked,
      processes: ConceptStatus.Locked,
      pids: ConceptStatus.Locked,
      streams: ConceptStatus.Locked,
      'pipe-operator': ConceptStatus.Locked,
      ranges: ConceptStatus.Locked,
      agent: ConceptStatus.Locked,
      'regular-expressions': ConceptStatus.Locked,
      'list-comprehensions': ConceptStatus.Locked,
      protocols: ConceptStatus.Locked,
    },
  },
}
