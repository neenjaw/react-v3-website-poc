import { ConceptState } from '../concepts-map/concept-types'

export const data = {
  concepts: [
    {
      slug: 'basics',
      name: 'Basics',
      web_url: 'localhost:3000/basicsExercise',
      status: ConceptState.Locked,
    },
    {
      slug: 'atoms',
      name: 'Atoms',
      web_url: 'localhost:3000/atomsExercise',
      status: ConceptState.Locked,
    },
    {
      slug: 'cond',
      name: 'Cond',
      web_url: 'localhost:3000/condExercise',
      status: ConceptState.Locked,
    },
    {
      slug: 'atoms2',
      name: 'Atoms2',
      web_url: 'localhost:3000/atoms2Exercise',
      status: ConceptState.Locked,
    },
    {
      slug: 'cond2',
      name: 'Cond2',
      web_url: 'localhost:3000/cond2Exercise',
      status: ConceptState.Locked,
    },
    {
      slug: 'atoms3',
      name: 'Atoms3 LONG NAME MAKE THIS WRAP',
      web_url: 'localhost:3000/atoms3Exercise',
      status: ConceptState.Locked,
    },
    {
      slug: 'cond3',
      name: 'Cond3 LONG NAME',
      web_url: 'localhost:3000/cond3Exercise',
      status: ConceptState.Locked,
    },
    {
      slug: 'atoms4',
      name: 'Atoms4 LONG NAME',
      web_url: 'localhost:3000/atoms4Exercise',
      status: ConceptState.Locked,
    },
    {
      slug: 'cond4',
      name: 'Cond4 LONG NAME',
      web_url: 'localhost:3000/cond4Exercise',
      status: ConceptState.Locked,
    },
  ],
  levels: [
    ['basics'],
    ['atoms', 'cond'],
    ['atoms2', 'cond2', 'atoms3', 'atoms4', 'cond4', 'cond3'],
  ],
  connections: [
    {
      from: 'basics',
      to: 'atoms',
    },
    {
      from: 'basics',
      to: 'cond',
    },
    {
      from: 'atoms',
      to: 'atoms2',
    },
    {
      from: 'atoms',
      to: 'cond2',
    },
    {
      from: 'atoms',
      to: 'atoms3',
    },
    {
      from: 'atoms',
      to: 'cond3',
    },
  ],
}

export const data2 = {
  concepts: [
    {
      slug: 'basics',
      name: 'Basics',
      web_url: 'http://exercism.lol/tracks/elixir/concepts/basics',
      status: ConceptState.Locked,
    },
    {
      slug: 'booleans',
      name: 'Booleans',
      web_url: 'http://exercism.lol/tracks/elixir/concepts/booleans',
      status: ConceptState.Locked,
    },
    {
      slug: 'integers',
      name: 'Integers',
      web_url: 'http://exercism.lol/tracks/elixir/concepts/integers',
      status: ConceptState.Locked,
    },
    {
      slug: 'floating-point-numbers',
      name: 'Floating Point Numbers',
      web_url:
        'http://exercism.lol/tracks/elixir/concepts/floating-point-numbers',
      status: ConceptState.Locked,
    },
    {
      slug: 'cond',
      name: 'Cond',
      web_url: 'http://exercism.lol/tracks/elixir/concepts/cond',
      status: ConceptState.Locked,
    },
    {
      slug: 'atoms',
      name: 'Atoms',
      web_url: 'http://exercism.lol/tracks/elixir/concepts/atoms',
      status: ConceptState.Locked,
    },
    {
      slug: 'lists',
      name: 'Lists',
      web_url: 'http://exercism.lol/tracks/elixir/concepts/lists',
      status: ConceptState.Locked,
    },
    {
      slug: 'string-literals',
      name: 'String Literals',
      web_url: 'http://exercism.lol/tracks/elixir/concepts/string-literals',
      status: ConceptState.Locked,
    },
    {
      slug: 'multiple-clause-functions',
      name: 'Multiple Clause Functions',
      web_url:
        'http://exercism.lol/tracks/elixir/concepts/multiple-clause-functions',
      status: ConceptState.Locked,
    },
    {
      slug: 'guards',
      name: 'Guards',
      web_url: 'http://exercism.lol/tracks/elixir/concepts/guards',
      status: ConceptState.Locked,
    },
    {
      slug: 'default-arguments',
      name: 'Default Arguments',
      web_url: 'http://exercism.lol/tracks/elixir/concepts/default-arguments',
      status: ConceptState.Locked,
    },
    {
      slug: 'anonymous-functions',
      name: 'Anonymous Functions',
      web_url: 'http://exercism.lol/tracks/elixir/concepts/anonymous-functions',
      status: ConceptState.Locked,
    },
    {
      slug: 'closures',
      name: 'Closures',
      web_url: 'http://exercism.lol/tracks/elixir/concepts/closures',
      status: ConceptState.Locked,
    },
    {
      slug: 'bit-manipulation',
      name: 'Bit Manipulation',
      web_url: 'http://exercism.lol/tracks/elixir/concepts/bit-manipulation',
      status: ConceptState.Locked,
    },
    {
      slug: 'tuples',
      name: 'Tuples',
      web_url: 'http://exercism.lol/tracks/elixir/concepts/tuples',
      status: ConceptState.Locked,
    },
    {
      slug: 'pattern-matching',
      name: 'Pattern Matching',
      web_url: 'http://exercism.lol/tracks/elixir/concepts/pattern-matching',
      status: ConceptState.Locked,
    },
    {
      slug: 'strings',
      name: 'Strings',
      web_url: 'http://exercism.lol/tracks/elixir/concepts/strings',
      status: ConceptState.Locked,
    },
    {
      slug: 'nil',
      name: 'Nil',
      web_url: 'http://exercism.lol/tracks/elixir/concepts/nil',
      status: ConceptState.Locked,
    },
    {
      slug: 'if',
      name: 'If',
      web_url: 'http://exercism.lol/tracks/elixir/concepts/if',
      status: ConceptState.Locked,
    },
    {
      slug: 'module-attributes-as-constants',
      name: 'Module Attributes As Constants',
      web_url:
        'http://exercism.lol/tracks/elixir/concepts/module-attributes-as-constants',
      status: ConceptState.Locked,
    },
    {
      slug: 'maps',
      name: 'Maps',
      web_url: 'http://exercism.lol/tracks/elixir/concepts/maps',
      status: ConceptState.Locked,
    },
    {
      slug: 'recursion',
      name: 'Recursion',
      web_url: 'http://exercism.lol/tracks/elixir/concepts/recursion',
      status: ConceptState.Locked,
    },
    {
      slug: 'charlists',
      name: 'Charlists',
      web_url: 'http://exercism.lol/tracks/elixir/concepts/charlists',
      status: ConceptState.Locked,
    },
    {
      slug: 'case',
      name: 'Case',
      web_url: 'http://exercism.lol/tracks/elixir/concepts/case',
      status: ConceptState.Locked,
    },
    {
      slug: 'access-behaviour',
      name: 'Access Behaviour',
      web_url: 'http://exercism.lol/tracks/elixir/concepts/access-behaviour',
      status: ConceptState.Locked,
    },
    {
      slug: 'binaries',
      name: 'Binaries',
      web_url: 'http://exercism.lol/tracks/elixir/concepts/binaries',
      status: ConceptState.Locked,
    },
    {
      slug: 'bitstrings',
      name: 'Bitstrings',
      web_url: 'http://exercism.lol/tracks/elixir/concepts/bitstrings',
      status: ConceptState.Locked,
    },
    {
      slug: 'tail-call-recursion',
      name: 'Tail Call Recursion',
      web_url: 'http://exercism.lol/tracks/elixir/concepts/tail-call-recursion',
      status: ConceptState.Locked,
    },
    {
      slug: 'enum',
      name: 'Enum',
      web_url: 'http://exercism.lol/tracks/elixir/concepts/enum',
      status: ConceptState.Locked,
    },
    {
      slug: 'errors',
      name: 'Errors',
      web_url: 'http://exercism.lol/tracks/elixir/concepts/errors',
      status: ConceptState.Locked,
    },
    {
      slug: 'try-rescue',
      name: 'Try Rescue',
      web_url: 'http://exercism.lol/tracks/elixir/concepts/try-rescue',
      status: ConceptState.Locked,
    },
    {
      slug: 'structs',
      name: 'Structs',
      web_url: 'http://exercism.lol/tracks/elixir/concepts/structs',
      status: ConceptState.Locked,
    },
    {
      slug: 'static-access-operator',
      name: 'Static Access Operator',
      web_url:
        'http://exercism.lol/tracks/elixir/concepts/static-access-operator',
      status: ConceptState.Locked,
    },
    {
      slug: 'exceptions',
      name: 'Exceptions',
      web_url: 'http://exercism.lol/tracks/elixir/concepts/exceptions',
      status: ConceptState.Locked,
    },
    {
      slug: 'keyword-lists',
      name: 'Keyword Lists',
      web_url: 'http://exercism.lol/tracks/elixir/concepts/keyword-lists',
      status: ConceptState.Locked,
    },
    {
      slug: 'try-rescue-else-after',
      name: 'Try Rescue Else After',
      web_url:
        'http://exercism.lol/tracks/elixir/concepts/try-rescue-else-after',
      status: ConceptState.Locked,
    },
    {
      slug: 'processes',
      name: 'Processes',
      web_url: 'http://exercism.lol/tracks/elixir/concepts/processes',
      status: ConceptState.Locked,
    },
    {
      slug: 'pids',
      name: 'Pids',
      web_url: 'http://exercism.lol/tracks/elixir/concepts/pids',
      status: ConceptState.Locked,
    },
    {
      slug: 'streams',
      name: 'Streams',
      web_url: 'http://exercism.lol/tracks/elixir/concepts/streams',
      status: ConceptState.Locked,
    },
    {
      slug: 'pipe-operator',
      name: 'Pipe Operator',
      web_url: 'http://exercism.lol/tracks/elixir/concepts/pipe-operator',
      status: ConceptState.Locked,
    },
    {
      slug: 'ranges',
      name: 'Ranges',
      web_url: 'http://exercism.lol/tracks/elixir/concepts/ranges',
      status: ConceptState.Locked,
    },
    {
      slug: 'agent',
      name: 'Agent',
      web_url: 'http://exercism.lol/tracks/elixir/concepts/agent',
      status: ConceptState.Locked,
    },
    {
      slug: 'regular-expressions',
      name: 'Regular Expressions',
      web_url: 'http://exercism.lol/tracks/elixir/concepts/regular-expressions',
      status: ConceptState.Locked,
    },
    {
      slug: 'list-comprehensions',
      name: 'List Comprehensions',
      web_url: 'http://exercism.lol/tracks/elixir/concepts/list-comprehensions',
      status: ConceptState.Locked,
    },
  ],
  levels: [
    ['basics'],
    [
      'booleans',
      'integers',
      'floating-point-numbers',
      'anonymous-functions',
      'closures',
      'bit-manipulation',
    ],
    ['cond', 'atoms', 'lists', 'string-literals'],
    ['multiple-clause-functions', 'guards', 'default-arguments'],
    ['tuples', 'pattern-matching'],
    ['strings', 'module-attributes-as-constants', 'maps', 'recursion'],
    [
      'nil',
      'if',
      'charlists',
      'case',
      'processes',
      'pids',
      'regular-expressions',
    ],
    [
      'access-behaviour',
      'bitstrings',
      'tail-call-recursion',
      'enum',
      'structs',
      'static-access-operator',
      'keyword-lists',
    ],
    [
      'binaries',
      'errors',
      'try-rescue',
      'streams',
      'pipe-operator',
      'ranges',
      'agent',
      'list-comprehensions',
    ],
    ['exceptions', 'try-rescue-else-after'],
  ],
  connections: [
    { from: 'basics', to: 'booleans' },
    { from: 'basics', to: 'integers' },
    { from: 'basics', to: 'floating-point-numbers' },
    { from: 'basics', to: 'anonymous-functions' },
    { from: 'basics', to: 'closures' },
    { from: 'basics', to: 'bit-manipulation' },
    { from: 'booleans', to: 'cond' },
    { from: 'booleans', to: 'atoms' },
    { from: 'booleans', to: 'lists' },
    { from: 'booleans', to: 'string-literals' },
    { from: 'cond', to: 'multiple-clause-functions' },
    { from: 'cond', to: 'guards' },
    { from: 'cond', to: 'default-arguments' },
    { from: 'atoms', to: 'multiple-clause-functions' },
    { from: 'atoms', to: 'guards' },
    { from: 'atoms', to: 'default-arguments' },
    { from: 'lists', to: 'multiple-clause-functions' },
    { from: 'lists', to: 'guards' },
    { from: 'lists', to: 'default-arguments' },
    { from: 'string-literals', to: 'multiple-clause-functions' },
    { from: 'string-literals', to: 'guards' },
    { from: 'string-literals', to: 'default-arguments' },
    { from: 'multiple-clause-functions', to: 'tuples' },
    { from: 'multiple-clause-functions', to: 'pattern-matching' },
    { from: 'guards', to: 'tuples' },
    { from: 'guards', to: 'pattern-matching' },
    { from: 'default-arguments', to: 'tuples' },
    { from: 'default-arguments', to: 'pattern-matching' },
    { from: 'tuples', to: 'strings' },
    { from: 'pattern-matching', to: 'strings' },
    { from: 'tuples', to: 'module-attributes-as-constants' },
    { from: 'tuples', to: 'maps' },
    { from: 'pattern-matching', to: 'module-attributes-as-constants' },
    { from: 'pattern-matching', to: 'maps' },
    { from: 'tuples', to: 'recursion' },
    { from: 'pattern-matching', to: 'recursion' },
    { from: 'strings', to: 'nil' },
    { from: 'strings', to: 'if' },
    { from: 'recursion', to: 'charlists' },
    { from: 'recursion', to: 'case' },
    { from: 'recursion', to: 'processes' },
    { from: 'recursion', to: 'pids' },
    { from: 'strings', to: 'regular-expressions' },
    { from: 'nil', to: 'access-behaviour' },
    { from: 'if', to: 'access-behaviour' },
    { from: 'charlists', to: 'bitstrings' },
    { from: 'charlists', to: 'tail-call-recursion' },
    { from: 'case', to: 'bitstrings' },
    { from: 'case', to: 'tail-call-recursion' },
    { from: 'nil', to: 'enum' },
    { from: 'if', to: 'enum' },
    { from: 'nil', to: 'structs' },
    { from: 'nil', to: 'static-access-operator' },
    { from: 'if', to: 'structs' },
    { from: 'if', to: 'static-access-operator' },
    { from: 'nil', to: 'keyword-lists' },
    { from: 'if', to: 'keyword-lists' },
    { from: 'bitstrings', to: 'binaries' },
    { from: 'tail-call-recursion', to: 'binaries' },
    { from: 'structs', to: 'errors' },
    { from: 'structs', to: 'try-rescue' },
    { from: 'static-access-operator', to: 'errors' },
    { from: 'static-access-operator', to: 'try-rescue' },
    { from: 'enum', to: 'streams' },
    { from: 'enum', to: 'pipe-operator' },
    { from: 'enum', to: 'ranges' },
    { from: 'structs', to: 'agent' },
    { from: 'static-access-operator', to: 'agent' },
    { from: 'enum', to: 'list-comprehensions' },
    { from: 'keyword-lists', to: 'list-comprehensions' },
    { from: 'errors', to: 'exceptions' },
    { from: 'try-rescue', to: 'exceptions' },
    { from: 'errors', to: 'try-rescue-else-after' },
    { from: 'try-rescue', to: 'try-rescue-else-after' },
  ],
}
